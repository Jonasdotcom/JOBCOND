/*                              REXX                                  */
/**********************************************************************/
/* - NOM : JOBCOND                                                    */
/* - FONCTION : AIDE à LA REPRISE DE JOBS CONDITIONNéS                */
/* - DATE DE CRéATION : 11/06/2022                                    */
/* - AUTEUR : RAOULT JONAS                                            */
/**********************************************************************/

"DELSTACK"
 DSNSCAN = USERID()'.JCL.CONDSCAN'
 DSNSUM = USERID()'.JCL.CONDSKEL'
STATUS = MSG('OFF')

CALL CLEARQUEUE

/*INVOKE USER CHOICE PANEL*/
ADDRESS ISPEXEC
"LIBDEF ISPPLIB DATASET ID('USR$.SDS.U0TOOG.ISPPLIB') "
"LIBDEF ISPMLIB DATASET ID('USR$.SDS.ISPFMLIB') "
  "ADDPOP ROW(6) COLUMN(14)"
"DISPLAY PANEL(CONDCH)"
IF RC = 8 THEN
   DO
     SAY "CANCELLING REQUEST."
     EXIT
END
"REMPOP"

/*EVALUATE USER CHOICE*/                   /* 1=DISPLAY SIMPLE */
CALL USERCHOICE UCHOICE                    /* 2=DISPLAY AVANCE */

/*IF UCHOICE = 2, PROCEED*/

/*INVOKE PANEL POP-UP*/
ADDRESS ISPEXEC
ADDRESS ISPEXEC "VPUT (DSNSUM)"
ADDRESS ISPEXEC "VPUT (DSNSCAN)"
"ADDPOP ROW(4) COLUMN(1)"
"DISPLAY PANEL(CONDPOP)"
IF RC = 8 THEN
   DO
     SAY "CANCELLING REQUEST."
     EXIT
   END
"REMPOP"

/*ALTER DSNAME*/
DSNSUM  = HLQMOD(DSNSUM)
DSNSCAN = HLQMOD(DSNSCAN)

/*VERIFYING DATASETS FROM USER INPUT*/
ADDRESS TSO
IF SYSDSN("'"DSNSUM"'") ^=  "OK" THEN DO
"ALLOC FI(FILE) DA('"DSNSUM"') RECFM(F,B) LRECL(80) BLKSIZE(27920)
 DSORG(PS) SPACE(10,5) TRACKS NEW CATALOG UNIT(3390) REUSE"
"FREE FI(FILE)"
END
IF SYSDSN("'"DSNSCAN"'") ^=  "OK" THEN DO
"ALLOC FI(FILE) DA('"DSNSCAN"') RECFM(F,B) LRECL(80) BLKSIZE(27920)
 DSORG(PS) SPACE(10,5) TRACKS NEW CATALOG UNIT(3390) REUSE"
"FREE FI(FILE)"
END
SAY "OVERWRITTING SUMMARY DATASET TO : "DSNSUM
SAY " "
SAY "OVERWRITTING SCAN DATASET TO : "DSNSCAN
SAY " "

/*1. CREATING SCAN DATASET*/

/*SEARCHING FOR JOBNAME*/
ADDRESS ISREDIT MACRO
"ISREDIT (FIRST) = LINENUM .ZFIRST"
"ISREDIT (LAST) = LINENUM .ZLAST"
I = 0
JNAME = ''
DO LINENUM = FIRST TO LAST
    I = I + 1
    "ISREDIT (TEMP) = LINE &LINENUM"
    LINE.I = TEMP
    JNAME = SEARCHJNAME(LINE.I)
    IF LENGTH(JNAME) > 1 THEN LEAVE
END

/*QUEUE SCAN JOB CARD*/
JOBCARD.1= '//'!!JNAME' JOB (T0DFP00),'"'JOB COND SCAN'"',MSGCLASS=X,  '
JOBCARD.2= '//             NOTIFY=&SYSUID,TYPRUN=SCAN'
QUEUE JOBCARD.1
QUEUE JOBCARD.2
QUEUE '//* '

/*QUEUE ACTUAL JCL*/
I=0
DO LINENUM = FIRST TO LAST
    I = I + 1                       /*SAVE LINE CONTENT IN STEM LINE. */
   "ISREDIT (TEMP) = LINE &LINENUM" /*QUEUE ALL LINES - EXCLUDE JBCARD*/
    LINE.I = TEMP                   /*  LINES VIA EXCLUDESTRING SUB   */
    CALL EXCLUDESTRING LINE.I
END
LINE.0 = I

/*INSERT QUEUE IN SCAN DATASET*/
CALL DATASETALLOC DSNSCAN 0

CALL CLEARQUEUE

/*2. CREATING SUMMARY DATASET*/

/*QUEUE SUMMARY DATASET HEADING*/
COMBAR.1 = '//******************************************************\\'
COMBAR.2 = '//* '
PARSE SOURCE TT JJJ KKK LL FF NN
PARSE VALUE TIME() WITH HH ':' MM ':' SS ':'
QUEUE COMBAR.1
QUEUE '//*' USERID() 'CREATED THIS DATASET USING' TT JJJ KKK '\\'
QUEUE COMBAR.2 ' FROM PDS' FF 'AT' HH':'MM':'SS 'ON' DATE() '            \\'
QUEUE COMBAR.1
QUEUE COMBAR.2 '          RÉSUMÉ DU CONDITIONNEMENT                \\'
QUEUE COMBAR.1
QUEUE COMBAR.2 '   VOUS POUVEZ TESTEZ VOTRE REPRISE SUR :          \\'
QUEUE COMBAR.2 '             'DSNSCAN
QUEUE COMBAR.1
QUEUE COMBAR.2

/* QUEUE SELECTED JCL LINES */
I=0
ISINJOBCARD = 1
DO LINENUM = FIRST TO LAST
    I = I + 1                        /* SAVE LINE CONTENT IN STEM LINE*/
   "ISREDIT (TEMP) = LINE &LINENUM"  /* QUEUE LINE VIA SELECSTRING SUB*/
    LINE.I = TEMP
    CALL SELECTSTRING LINE.I
END
LINE.0 = I

/*INSERT QUEUE IN SUMMARY DATASET*/
CALL DATASETALLOC DSNSUM 1

CALL CLEARQUEUE

/*ADD EQQ PLIB BACK TO USER PROFILE WHEN EXITING*/
ADDRESS ISPEXEC
"LIBDEF ISPPLIB DATASET ID('SYS9.TWS.SEQQPENU') "

EXIT 0

/**********************************************************************/
/*                         SUBROUTINES & FUNCTIONS                    */
/**********************************************************************/


USERCHOICE:
PARSE ARG CHOICE
SELECT
      WHEN CHOICE = 1 THEN CALL SIMPLEDISPLAY
      WHEN CHOICE = 2 THEN NOP
      WHEN DATATYPE(CHOICE) = NUM THEN
           DO
             SAY "AVAILABLE CHOICES ARE '1' OR '2', PLEASE TRY AGAIN."
             EXIT
           END
      WHEN DATATYPE(CHOICE) = CHAR THEN
           DO
             SAY "INPUT MUST BE NUMERIC, PLEASE TRY AGAIN."
             EXIT
           END
      WHEN CHOICE = ' ' THEN
           DO
             SAY "EMPTY INPUT FIELD, PLEASE TRY AGAIN."
             EXIT
           END
      OTHERWISE
           SAY "INVALID CHOICE, PLEASE TRY AGAIN."
           EXIT
END
RETURN 0


SIMPLEDISPLAY:
ADDRESS ISREDIT
'MACRO'
'X ALL'
'F EXEC ALL'
'F IF 3 ALL'
'F ELSE 3 ALL'
'F ENDIF ALL'
'X ALL DELETE'
SAY 'TO GO BACK TO ORIGINAL JCL, TYPE : "RESET EXCLUDED"'
SAY 'OR PRESS PF3 THEN RE-ENTER ORIGINAL JCL.'
/*ADD EQQ PLIB BACK TO USER PROFILE WHEN EXITING*/
ADDRESS ISPEXEC
"LIBDEF ISPPLIB DATASET ID('SYS9.TWS.SEQQPENU') "
EXIT


/*VERIFY DATASET LOCATIONS*/


/*EXTRACTS JOBNAME FROM JCL*/
SEARCHJNAME:
PROCEDURE
PARSE ARG STRING
FJOB = 'JOB'
IF SUBSTR(STRING,1,3) = '//*' THEN RETURN 0
STRING = TRANSLATE(STRING,' ','/')
IF WORDPOS(FJOB,STRING) > 0 THEN /*1ST JOBCARD LINE*/
DO
  RETURN WORD(STRING,1)
END
RETURN 0


/*QUEUES ONLY LINES MATCHING WITH STRING SFIND.%*/
SELECTSTRING:
PROCEDURE EXPOSE ISINJOBCARD
PARSE ARG STRING
SFIND.1 = 'IF'
SFIND.2 = 'ELSE'
SFIND.3 = 'ENDIF'
SFIND_NUM = 3
SEXEC = 'EXEC'
SCOM = '//*'
/*COND= LINES*/
SCOND = 'COND'
IF ISINJOBCARD = 1 THEN
   DO
      IF WORDPOS(SEXEC,STRING) > 0 THEN ISINJOBCARD = 0
   END
IF ISINJOBCARD = 0 THEN
   DO
      IF WORDPOS(SCOM,STRING) > 0 THEN RETURN 0
      ELSE
         DO
            TEMPSTRING = TRANSLATE(STRING,' ','=')
            TEMPSTRING = TRANSLATE(TEMPSTRING,' ',',')
            IF WORDPOS(SCOND,TEMPSTRING) > 0 THEN
               DO
                  QUEUE STRING
                  RETURN 0
               END
         END
   END
/*EXEC LINES*/
IF WORDPOS(SEXEC,STRING) > 0 THEN       /*IF EXEC IN LINE, CHECK IF COM TOO*/
   DO
     IF WORDPOS(SCOM,STRING) > 0 THEN   /*IF COM TOO, DON'T SELECT         */
        RETURN 0
     ELSE DO                            /*  OTHERWISE SELECT               */
        QUEUE STRING
        RETURN 0
        END
   END
/*SFIND LINES*/
DO I = 1 TO SFIND_NUM
  IF WORDPOS(SFIND.I,STRING) > 0 THEN
     DO                                    /*CHECK IF '//' IN LINE IN ORDER*/
       IF SUBSTR(STRING,1,2) = '//' THEN   /*TO AVOID SYSIN LINES          */
         DO
           STRING = CONDMOD(STRING)
           QUEUE STRING
           RETURN 0
         END
       ELSE
         NOP
     END
END
RETURN 0


/*QUEUES ONLY LINES NOT MATCHING WITH STRING EFIND.%*/
EXCLUDESTRING:
PROCEDURE
PARSE ARG STRING
EFIND.1 = 'NOTIFY'
EFIND.2 = 'MSGCLASS'
EFIND.3 = 'MSGLEVEL'
EFIND.4 = 'REGION'
EFIND.5 = 'JOB'
EFIND.6 = 'RESTART'
ECOND = 'COND'
EFIND_NUM = 6
TEMPSTRING = TRANSLATE(STRING,' ','=')
TEMPSTRING = TRANSLATE(TEMPSTRING,' ',',')
IF WORDPOS(ECOND,TEMPSTRING) > 0 THEN DO  /*IF COND IN LINE, CHECK IF EXEC TOO*/
   IF WORDPOS('EXEC',TEMPSTRING) > 0 THEN /*IF EXEC, COND IN STEP, QUEUE AFTER*/
      NOP
   ELSE                                   /*  OTHERWISE ITS JOBCARD, EXCLUDE  */
      RETURN 0
END
DO I = 1 TO EFIND_NUM
  IF WORDPOS(EFIND.I,TEMPSTRING) > 0 THEN DO
     RETURN 0
     END
END
QUEUE STRING
RETURN 0


/*ADD COMMENT WHEN COND STATEMENT IN STRING*/
CONDMOD:
PARSE ARG INITSTRING
COMPOS = 40
CONDCOM.1 = '//* DEBUT DE LA CONDITION '
CONDCOM.2 = '//* SINON DE LA CONDITION '
CONDCOM.3 = '//* FIN   DE LA CONDITION '
SELECT
   WHEN WORDPOS('THEN',INITSTRING) > 0 THEN
        I = 1
   WHEN WORDPOS('ELSE',INITSTRING) > 0 THEN
        I = 2
   WHEN WORDPOS('ENDIF',INITSTRING) > 0 THEN
        I = 3
   OTHERWISE
        SAY 'ERROR - NO KEYWORD FOUND IN CONDMOD SUB'
        EXIT
END
CONDNAME = SUBSTR(INITSTRING,1,WORDLENGTH(INITSTRING,1))
NUMCOND = SPACE(TRANSLATE(CONDNAME,X2C('40'),XRANGE('A','Z')'/'),0)
CONDSTRING = INSERT(CONDCOM.I NUMCOND, INITSTRING, COMPOS)
RETURN CONDSTRING


/*IF HLQ IS NOT UID, ADD UID AS HLQ*/
HLQMOD:
PROCEDURE
PARSE ARG DSNAME
TEMPNAME = TRANSLATE(DSNAME,X2C('40'),'.')
PARSE VAR TEMPNAME QUAL.1 QUAL.2 QUAL.3 QUAL.4 QUAL.5 QUAL.6 QUAL.7 QUAL.8
MAXQUAL = 8
IF QUAL.1 = USERID() THEN
   DO
   /*IF USER ONLY WRITES HIS USERID()*/
   IF LENGTH(QUAL.2) = 0 THEN
      DO
         QUAL.2 = USERID()
         DSNAME = QUAL.1'.'QUAL.2
      END
   ELSE NOP
   END
ELSE
   DO
      DSNAME = ''

      /*OFFSET ALL QUAL. IF NOT EMPTY*/
      DO I = MAXQUAL TO 2 BY -1
         J = I - 1
         QUAL.I = QUAL.J
      END I
      QUAL.1 = USERID()

      /*FIND QUAL COUNT IN DSNAME*/
      LASTQUAL = 0
      DO I = MAXQUAL TO 1 BY -1
         IF LENGTH(QUAL.I) > 0 THEN
            DO
               LASTQUAL = I
               LEAVE I
            END
      END

      /*CONSTRUCT DSNAME*/
      DO I = 1 TO LASTQUAL
         DSNAME = INSERT(DSNAME, QUAL.I!!'.')
      END
      DSNAME = STRIP(DSNAME,,'.')
   END
RETURN DSNAME


/*DATASET ALLOCATION*/
DATASETALLOC:
PARSE ARG DSNT OPEN
ADDRESS TSO
"ALLOC FI(FILE) DA('"DSNT"') SHR REUSE"
"EXECIO " QUEUED() " DISKW FILE (FINIS"
IF OPEN = 1 THEN DO
/*NOTIFY USER*/
SAY ' '
SAY 'YOU CAN NOW TEST YOUR JOB RUN BY SUBMITTING THE SCAN JOB AT : 'DSNSCAN
SAY 'YOU CAN ALSO REVIEW THE SUMMARY VERSION OF THE JOB AT : 'DSNSUM
SAY 'OR PRESS PF3 TO GO BACK TO THE ORIGINAL JCL.'
SAY 'NOW REDIRECTING TO SUMMARY VERSION...'
   ADDRESS ISPEXEC "EDIT DATASET('"DSNT"')"
END
RETURN 0


CLEARQUEUE:
DO I = 1 TO QUEUED()
  PULL DUMMY
END I
RETURN 0
